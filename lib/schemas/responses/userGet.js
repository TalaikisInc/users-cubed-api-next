// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var UserGet = exports.UserGet = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineUserGet()

function defineUserGet () {
  var enc = [
    encodings.string
  ]

  UserGet.encodingLength = encodingLength
  UserGet.encode = encode
  UserGet.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.email)) {
      var len = enc[0].encodingLength(obj.email)
      length += 1 + len
    }
    if (defined(obj.firstName)) {
      var len = enc[0].encodingLength(obj.firstName)
      length += 1 + len
    }
    if (defined(obj.lastName)) {
      var len = enc[0].encodingLength(obj.lastName)
      length += 1 + len
    }
    if (defined(obj.phone)) {
      var len = enc[0].encodingLength(obj.phone)
      length += 1 + len
    }
    if (defined(obj.address)) {
      var len = enc[0].encodingLength(obj.address)
      length += 1 + len
    }
    if (defined(obj.zipCode)) {
      var len = enc[0].encodingLength(obj.zipCode)
      length += 1 + len
    }
    if (defined(obj.city)) {
      var len = enc[0].encodingLength(obj.city)
      length += 1 + len
    }
    if (defined(obj.country)) {
      var len = enc[0].encodingLength(obj.country)
      length += 1 + len
    }
    if (defined(obj.dob)) {
      var len = enc[0].encodingLength(obj.dob)
      length += 1 + len
    }
    if (defined(obj.avatarUrl)) {
      var len = enc[0].encodingLength(obj.avatarUrl)
      length += 1 + len
    }
    if (defined(obj.role)) {
      var len = enc[0].encodingLength(obj.role)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.email)) {
      buf[offset++] = 10
      enc[0].encode(obj.email, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.firstName)) {
      buf[offset++] = 18
      enc[0].encode(obj.firstName, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.lastName)) {
      buf[offset++] = 26
      enc[0].encode(obj.lastName, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.phone)) {
      buf[offset++] = 34
      enc[0].encode(obj.phone, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.address)) {
      buf[offset++] = 42
      enc[0].encode(obj.address, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.zipCode)) {
      buf[offset++] = 50
      enc[0].encode(obj.zipCode, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.city)) {
      buf[offset++] = 58
      enc[0].encode(obj.city, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.country)) {
      buf[offset++] = 66
      enc[0].encode(obj.country, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.dob)) {
      buf[offset++] = 74
      enc[0].encode(obj.dob, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.avatarUrl)) {
      buf[offset++] = 82
      enc[0].encode(obj.avatarUrl, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.role)) {
      buf[offset++] = 90
      enc[0].encode(obj.role, buf, offset)
      offset += enc[0].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      email: "",
      firstName: "",
      lastName: "",
      phone: "",
      address: "",
      zipCode: "",
      city: "",
      country: "",
      dob: "",
      avatarUrl: "",
      role: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.email = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.firstName = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 3:
        obj.lastName = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 4:
        obj.phone = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 5:
        obj.address = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 6:
        obj.zipCode = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 7:
        obj.city = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 8:
        obj.country = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 9:
        obj.dob = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 10:
        obj.avatarUrl = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 11:
        obj.role = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
