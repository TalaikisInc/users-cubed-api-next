// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var TokenGet = exports.TokenGet = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineTokenGet()

function defineTokenGet () {
  var enc = [
    encodings.int64,
    encodings.string
  ]

  TokenGet.encodingLength = encodingLength
  TokenGet.encode = encode
  TokenGet.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.expiry)) {
      var len = enc[0].encodingLength(obj.expiry)
      length += 1 + len
    }
    if (defined(obj.tokenId)) {
      var len = enc[1].encodingLength(obj.tokenId)
      length += 1 + len
    }
    if (defined(obj.role)) {
      var len = enc[1].encodingLength(obj.role)
      length += 1 + len
    }
    if (defined(obj.email)) {
      var len = enc[1].encodingLength(obj.email)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.expiry)) {
      buf[offset++] = 8
      enc[0].encode(obj.expiry, buf, offset)
      offset += enc[0].encode.bytes
    }
    if (defined(obj.tokenId)) {
      buf[offset++] = 18
      enc[1].encode(obj.tokenId, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.role)) {
      buf[offset++] = 26
      enc[1].encode(obj.role, buf, offset)
      offset += enc[1].encode.bytes
    }
    if (defined(obj.email)) {
      buf[offset++] = 34
      enc[1].encode(obj.email, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      expiry: 0,
      tokenId: "",
      role: "",
      email: ""
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.expiry = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        break
        case 2:
        obj.tokenId = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 3:
        obj.role = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        case 4:
        obj.email = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
