service: users-cubed-api-next
app: users-cubed-api-next
org: talaikis

plugins:
  - serverless-dotenv-plugin
  - serverless-apigw-binary
  - serverless-api-compression
  - serverless-plugin-log-retention
  - serverless-plugin-aws-alerts
  - serverless-offline
provider:
  name: aws
  region: ${env:REGION}
  stage: ${env:STAGE}
  runtime: ${env:LAMBDA_RUNTIME}
  memorySize: 256
  timeout: 10
  versionFunctions: false
  apiKeys:
    - ${env:API_KEY}
  apiGateway:
    apiKeySourceType: HEADER
functions:
  handler:
    handler: index.handler
    name: ${env:LAMBDA_NAME}
    events:
      - http:
          path: /
          method: post
          cors: true
          private: true
    environment:
      HASH_SECRET: ${env:HASH_SECRET}
      TWILIO_FROM: ${env:TWILIO_FROM}
      TWILIO_SID: ${env:TWILIO_SID}
      TWILIO_AUTH_TOKEN: ${env:TWILIO_AUTH_TOKEN}
      MAILGUN_FROM: ${env:MAILGUN_FROM}
      MAILGUN_DOMAIN: ${env:MAILGUN_DOMAIN}
      MAILGUN_KEY: ${env:MAILGUN_KEY}
      STRIPE_TEST_SECRET: ${env:STRIPE_TEST_SECRET}
      STRIPE_LIVE_SECRET: ${env:STRIPE_LIVE_SECRET}
      AUTH0_DOMAIN: ${env:AUTH0_DOMAIN}
      AUTH0_CLIENT_ID: ${env:AUTH0_CLIENT_ID}
      S3_ACCESS_KEY: ${env:S3_ACCESS_KEY}
      S3_ACCESS_SECRET: ${env:S3_ACCESS_SECRET}
      S3_REGION: ${env:S3_REGION}
      ENCRYPTION_SALT: ${env:ENCRYPTION_SALT}
      ENCRYPTION_PASSWORD: ${env:ENCRYPTION_PASSWORD}
      API_KEY: ${env:API_KEY}
      USERS_BUCKET_NAME: ${env:USERS_BUCKET_NAME}
      NODE_ENV: ${env:NODE_ENV}
custom:
  contentCompression: 1024
  logRetentionInDays: 30
  apigwBinary:
    types:
      - 'application/x-protobuf'
  alerts:
    dashboards: true
    nameTemplate: $[functionName]-$[metricName]-Alarm
    topics:
      ok: ${self:service}-${opt:stage}-alerts-ok
      alarm: ${self:service}-${opt:stage}-alerts-alarm
      insufficientData: ${self:service}-${opt:stage}-alerts-insufficientData
    definitions:
      functionErrors:
        period: 300
      customAlarm:
        description: 'My custom alarm'
        namespace: 'AWS/Lambda'
        nameTemplate: $[functionName]-Duration-IMPORTANT-Alarm
        metric: duration
        threshold: 200
        statistic: Average
        period: 300
        evaluationPeriods: 1
        datapointsToAlarm: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
  serverless-offline:
    apiKey: ${env:API_KEY}
    port: 4000
package:
  exclude:
    - git/**
    - dist/**
    - test/**
